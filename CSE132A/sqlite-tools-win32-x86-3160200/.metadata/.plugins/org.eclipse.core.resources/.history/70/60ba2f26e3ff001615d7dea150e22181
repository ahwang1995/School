/**
 * This Java program exemplifies the basic usage of JDBC.
 * Requirements:
 * (1) JDK 1.6+.
 * (2) SQLite3.
 * (3) SQLite3 JDBC jar (https://bitbucket.org/xerial/sqlitejdbc/downloads/sqlite-jdbc-3.8.7.jar).
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class PA2 {
 public static void main(String[] args) {
 Connection conn = null; // Database connection.
 try {
 // Load the JDBC class.
 Class.forName("org.sqlite.JDBC");
 // Get the connection to the database.
 // - "jdbc" : JDBC connection name prefix.
 // - "sqlite" : The concrete database implementation
 // (e.g., sqlserver, postgresql).
 // - "pa2.db" : The name of the database. In this project,
 // we use a local database named "pa2.db". This can also
 // be a remote database name.
 conn = DriverManager.getConnection("jdbc:sqlite:pa2.db");
 System.out.println("Opened database successfully.");
 // Use case #1: Create and populate a table.
 Statement stmt = conn.createStatement();
 
 stmt.executeUpdate("DROP TABLE IF EXISTS T;");
 stmt.executeUpdate(
 "CREATE TABLE T(Airline char(32), Origin char(32), Destination char(32),Stops int);");
 stmt.executeUpdate("INSERT INTO T(Airline,Origin,Destination)"
		 + " SELECT Airline,Origin,Destination FROM Flight;");
 
 stmt.executeUpdate("DROP TABLE IF EXISTS D;");
 stmt.executeUpdate(
  "CREATE TABLE D(Airline char(32), Origin char(32), Destination char(32));");
  stmt.executeUpdate(
 "INSERT INTO D(Airline,Origin,Destination)"
 + " SELECT Airline,Origin,Destination FROM Flight;");
 
 stmt.executeUpdate("DROP TABLE IF EXISTS tOld;");
 stmt.executeUpdate(
 "CREATE TABLE tOld(Airline char(32), Origin char(32), Destination char(32),Stops int);");
 ResultSet rset = stmt.executeQuery("SELECT COUNT(*) from D;");
 int numStops = 0;
 stmt.executeUpdate("INSERT INTO T SELECT *," + numStops + " FROM Flight;");
 //stmt.executeUpdate("DELETE FROM T ")
 
 while (rset.next()) {
	 stmt.executeUpdate("DELETE * FROM tOld");
	 System.out.print("-");
	 stmt.executeUpdate("INSERT INTO tOld SELECT * FROM T;");
	 System.out.print("--");
	 stmt.executeUpdate("INSERT INTO T SELECT a.Airline,a.Origin,a.Destination," + numStops +
			 " FROM D a,Flight b WHERE a.Airline = b.Airline AND a.Destination = b.Origin"
			 + " AND a.Origin != b.Destination;");
	 System.out.print("---");
	 stmt.executeUpdate("DELETE * FROM D;");
	 stmt.executeUpdate("INSERT INTO D SELECT Airline,Origin,Destination FROM T EXCEPT"
	 		+ " SELECT Airline,Origin,Destination FROM tOld;");
	 numStops++;
	 System.out.print("---");
 }
 stmt.executeUpdate("DROP TABLE IF EXISTS Connected;");
 stmt.executeUpdate(
		 "CREATE TABLE Connected(Airline char(32), Origin char(32), Destination char(32),Stops int);");
 stmt.executeUpdate("INSERT INTO Connected SELECT Airline,Origin,Destination, MIN(Stops)"
 		+ " FROM T GROUP BY Airline,Origin,Destination;");
 // Close the ResultSet and Statement objects.
 rset.close();
 stmt.close();
 } catch (Exception e) {
 throw new RuntimeException("There was a runtime problem!", e);
 } finally {
 try {
 if (conn != null) conn.close();
 } catch (SQLException e) {
 throw new RuntimeException(
 "Cannot close the connection!", e);
 }
 }
 }
}